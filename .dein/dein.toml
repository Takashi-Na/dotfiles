# ディレクトリのツリー表示
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let NERDTreeShowHidden=1
  nnoremap <silent><C-e> :NERDTreeFind<CR>:vertical res 30<CR>
'''

# status bar
[[plugins]]
repo = 'vim-airline/vim-airline'
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = 'vim-airline'
hook_add = '''
  let g:airline_theme = 'onedark'
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#tabline#fnamemod = ':t'
'''

# git show diff
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set signcolumn=yes
  let g:gitgutter_async = 1
  let g:gitgutter_sign_modified = 'rw'
  highlight GitGutterAdd ctermfg=green
  highlight GitGutterChange ctermfg=yellow
  highlight GitGutterDelete ctermfg=red
  highlight GitGutterChangeDelete ctermfg=yellow
'''

# 簡易コメントアウト
# normal:gcc view:gc
[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
  vnoremap ? :'<,'>TComment<CR>
'''

# indentの表示
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
'''

# 括弧に色付け
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1
'''

# 閉じタグの補完
[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = ['html', 'xhtml', 'javascript', 'typescript', 'javascript.jsx', 'typescript.tsx']
hook_add = '''
  let g:closetag_filenames='*.html'
  let g:closetag_xhtml_filenames='*.jsx,*.tsx,*.vue'
  let g:closetag_filetypes='html'
  let g:closetag_xhtml_filetypes='jsx,tsx,javascript.jsx,typescript.tsx,vue'
  let g:closetag_emptyTags_caseSensitive=1
  let g:closetag_shortcut='>'
'''

# アイコン表示
# [[plugins]]
# repo = 'ryanoasis/vim-devicons'

# fzf(曖昧検索)
# gitでtrackingしていない場合は:Filesを使って検索すること
[[plugins]]
repo = 'junegunn/fzf'
hook_post_update = './install --all'
merged = 0
# fzf.vim
[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
  command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \ 'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
  \ <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
  \ : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
  \ <bang>0)
  nnoremap <C-o> :Rg<Space>
  nnoremap <C-p> :GFiles<CR>
  nnoremap <C-h> :History<CR>
'''

# 定義元ジャンプ
# 補完機能
# gdでジャンプ <C-o>で戻る
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
  git checkout release
'''
hook_add = '''
  inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
'''

# 非同期コードチェック
[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
  let g:ale_disable_lsp = 1
  let g:ale_lint_on_text_changed = 1
'''

# end補完
[[plugins]]
repo = 'tpope/vim-endwise'

# jsの記述ルール
[[plugins]]
repo = 'prettier/vim-prettier'
build = 'npm install'
# hook_add = '''
#   let g:prettier#config#single_quote = 'true'
#   let g:prettier#config#trailing_comma = 'all'
# '''

# editorの設定を管理
[[plugins]]
repo = 'editorconfig/editorconfig-vim'
